#!/usr/bin/perl

#
# tab2abc - script for converting music format tab to abc
#

#
# Author:  Christoph Dalitz
# License: freely distributable under GPL
# Version: 1.8
#
# History:
#   29.07.2002  first creation
#   03.08.2002  new option -beam
#               handling of centered titles {\CL/...}
#               better recognition of numbered diapasons in frenchtab
#   08.08.2002  suppression of trailing commas in chord
#               bugfix in handling thick barlines
#               !x interpreted as tenth fret,
#               otherwise '!' in tab treated as empty course
#               support for text under chords, can be suppressed 
#               with new option "-notext"
#               music lines are now ignored
#   11.08.2002  '-' removed as second char in parse_time()
#               support for '-' as empty course
#               support for tab's time signatures 'So' and 'SO'
#   20.06.2003  support for tab's brevis and longa
#   05.02.2004  support for longa, y-fermata, ".bb", "bb."
#               support for tab's grid notation (#)
#   13.03.2004  inline meter changes possible
#   19.06.2004  correction "bb.", support for bar variants "b[TXQ]"
#               bar lines with trailing "i" recognized
#   03.04.2011  single line with 'p' creates new tune
#               layout emulation guessed form tab command line optional
#   08.04.2011  new option -nolinebreak for suppressing linebreaks
#               with continuation backslash per bar
#

use strict;

# global variable intitializations
#---------------------------------------------------

my $PGM = "tab2abc";
my $VERSION = "1.8";
my $USAGEMSG = "This is " . $PGM . " version " . $VERSION . "\n" .
	"USAGE:\n\t" . $PGM . " [options] [<infile>]\n" .
	"OPTIONS:\n" .
	"\t-?           help message\n" .
	"\t-tab <typ>   tablature type.\n" .
	"\t             possible values for <typ>:\n" .
	"\t               'fr'  (french tab)\n" .
	"\t               'sp'  (spanish/guitar tab)\n" .
	"\t               'it'  (italian tab)\n" .
	"\t               'it7' (7 course italian tab)\n" .
	"\t             (default value: fr)\n" .
	"\t-len <len>   value of L: field in abc\n" .
	"\t             (default value: 1/8)\n" .
	"\t-beam        do not separate chords by spaces\n" .
	"\t             (if you want beams in abc output)\n" .
	"\t-layout      try to emulate tab's layout settings\n" .
	"\t-nolinebreak do not beautify abc code to bar per line\n" .
	"\t-notext      suppress text under chords\n";

# input file
my $INFILE = "";

# suppress text under chords?
my $NOTEXT = 0;

# try to emulate layout of tab file?
my $EMULATELAYOUT = 0;

# suppress beautification with one bar per line?
my $NOLINEBREAK = 0;

# chord seperator
my $CHORDSEP = " ";

# grid status indicator
#  0 = no grid, 1 = first grid note, 2 = within grid
my $GRIDSTATE = 0;

# header info fields
my %HEADER = ("X" => 1,
			  "L" => "1/8",
			  "Z" => "converted from tab with $PGM $VERSION",
			  "K" => "frenchtab"
			  );
# layout parameters
my %LAYOUT = ("titleleft" => "yes",
			  "tabaddflags" => "0"
			  );
# abc music body
my $BODY = "";


# subroutines
#---------------------------------------------------

#
# (void) fix_tabline (\$line)
#	- fixes some odd or ambiguous tab constructs
#
sub fix_tabline {
	my $line = $_[0];
	my @linearr;

	# remove trailing whitespace from input line
	$$line =~ s/\s+$//;

	# replace !x with its meaning (tenth fret)
	# unless for invisible symbols
	if (substr($$line, 1, 1) ne "!") {
		$$line =~ s/!x/N10/g;
	}

	# grids can start with "#2" or "2#"
	# always transform to "2#"
	@linearr = split(//, $$line);
	if ($linearr[0] eq "#") {
		$linearr[0] = $linearr[1];
		$linearr[1] = "#";
	}
	$$line = join('', @linearr);

	# remove i (indent) after bar lines
	$$line =~ s/^(\.?[bB]+\.?)i+$/\1/;
}

#
# ($abcfactor) parse_time (\$tabchord)
#	- remove time value from $tabchord and return abc time factor
#
# global variables for remembering time factors in grids
my $gridfactor;
my $lasttabfactor;
#
sub parse_time {
	my $chord = $_[0];
	my $tabfactor;
	my $abcfactor;
	# translaton with L:1/8
	my %timemap = (-4 => "32",   -4.5 => "48",
				   -3 => "16",   -3.5 => "24",
				   -2 => "8",    -2.5 => "12",
				   -1 => "4",    -1.5 => "6",
				   0  => "2",    -0.5 => "3",
				   1  => "1",     0.5 => "3/2",
				   2  => "/",     1.5 => "3/4",
				   3  => "//",    2.5 => "3/8",
				   4  => "///",   3.5 => "3/16",
				   5  => "////",  4.5 => "3/32",
				   6  => "/////", 5.5 => "3/64"
				   );

	# determine number of flags
    if ($$chord =~ /^L/) {
		$tabfactor = -4;
    }
    elsif ($$chord =~ /^B/) {
		$tabfactor = -3;
    }
	elsif ($$chord =~ /^W/) {
		$tabfactor = -2;
	}
	elsif ($$chord =~ /^w/) {
		$tabfactor = -1;
	}
	elsif ($$chord =~ /^\d/) {
		$tabfactor = substr($$chord, 0, 1);
	}

	# adjust for abc default length set in header
	if ($HEADER{"L"} ne "1/8") {
		my @meter = split('/', $HEADER{"L"});
		$tabfactor -= int(log(0.125 * $meter[1]/$meter[0]) / log(2));
	}

	# translate number of flags to abcfactor

	# start of grid
	if ($$chord =~ /^\d[#\*\|]/) {
		$GRIDSTATE = 1;
		$gridfactor = $tabfactor; # remember for following notes
		if (substr($$chord,1,1) eq "*") { # dot in grid
			$tabfactor -= 0.5;
		} elsif (substr($$chord,1,1) eq "|") { # additional flag in grid
			$tabfactor += 1;
		}
		$abcfactor = $timemap{$tabfactor};
		$lasttabfactor = $tabfactor;
		$$chord = substr($$chord, 2);
	}
	# within grid
	elsif ($GRIDSTATE && $$chord =~ /^x(\*|\||-)?(.*)/) {
		$GRIDSTATE = 2;
		if (substr($$chord,1,1) eq "*") { # dot in grid
			$tabfactor = $gridfactor - 0.5;
			$abcfactor = $timemap{$tabfactor};
		} elsif (substr($$chord,1,1) eq "|") { # additional flag in grid
			$tabfactor = $gridfactor + 1;
			$abcfactor = $timemap{$tabfactor};
		} elsif ($lasttabfactor != $gridfactor) {
			$tabfactor = $gridfactor;
			$abcfactor = $timemap{$tabfactor};
		} else {
			$tabfactor = $gridfactor;
			$abcfactor = "";
		}
		$lasttabfactor = $tabfactor;
		$$chord = $2;
	}
	# no grid
	else {
		$GRIDSTATE = 0;
		# no flag
		if ($$chord =~ /^x-?(.*)/) {
			$abcfactor = "";
			$$chord = $1;
		}
		# dotted time
		elsif ($$chord =~ /^.\.(.*)/) {
			$tabfactor -= 0.5;
			$abcfactor = $timemap{$tabfactor};
			$$chord = $1;
		}
		# normal time
		else {
			$abcfactor = $timemap{$tabfactor};
			if (substr($$chord, 1, 1) eq "-") {
				$$chord = substr($$chord, 2);
			} else {
				$$chord = substr($$chord, 1);
			}
		}
	}

	return $abcfactor;
}

#
# ($abcchord) parse_chord ($tabchord)
#	- parse a chord in tab and return chord in abc
#
sub parse_chord {
	my $chord = $_[0];
	my @chordarr;
	my $factor;
	my $decos = "";
	my @abcchord;
	my $retval;
	my $numnotes;
	my $gchord = "";
	my $c;
	my $i;

	# translation italian -> french
	my %it2fr = ( "0" => "a", "1" => "b", "2" => "c", "3" => "d",
				  "4" => "e", "5" => "f", "6" => "g", "7" => "h",
				  "8" => "i", "9" => "k", "x" => "l", "10" => "l",
				  "11" => "m", "12" => "n", "13" => "o" );

	# fermata has no length in tab; need one in abc
	if ($chord =~ /^[Yy]/) {
		$chord =~ s/^[Yy]/w/;
		$decos .= "H";
	}
	# convert time factor
	$factor = parse_time(\$chord);

	# read tabchord char for char and store in abcchord array
	@chordarr = split(//, $chord);
	for ($i=0; $i <= $#chordarr; $i++) {
		$c = $chordarr[$i];
		# chord characters
		if ($c eq " ") {
			push(@abcchord, ",");
		}
		elsif (($c eq "!") || ($c eq "-")) {
			# means "decoration on empty course"
			push(@abcchord, ",");
			# (according to tab's doc '!' also could mean
			# "octal escape sequence", but this does not seem to be true)
		}
		elsif ($c =~ /[a-pD]/) {
			$c =~ tr/D/d/;
			push(@abcchord, $c);
		}
		elsif ($c =~ /[0-9]/) {
			# diapasons in italian7tab
			if (($HEADER{"K"} eq "italian7tab") && 
				($#abcchord < 0) && ($c =~ /[7-9]/)) {
				if ($c eq "7") {
					push(@abcchord, "a");
				}
				else {
					push(@abcchord, $c);
				}
			}
			# diapasons in frenchtab
			elsif (($HEADER{"K"} eq "frenchtab") && 
				   ($#abcchord >= 5) && ($c =~ /[0-9]/)) {
				push(@abcchord, $c);
			}
			# normal italian tab numbers
			else {
				push(@abcchord, $it2fr{$c});
			}
		}
		elsif ($c eq "N") {
			my $num;
			$num = $chordarr[++$i] . $chordarr[++$i];
			if ( (($HEADER{"K"} eq "frenchtab") && ($#abcchord >= 5)) ||
				 (($HEADER{"K"} eq "italian7tab") && ($#abcchord < 0)) )
			{
				# in frenchtab or italian7tab this can be a diapason
				push(@abcchord, $num);
			} else {
				# otherwise a high fret in italian or spanishtab
				push(@abcchord, $it2fr{$num});
			}
		}
		# diapason
		elsif (($c eq "/") && ($#abcchord >= 5)) {
			my $tmp = "";
			while ($chordarr[$i] eq "/") {
				$tmp .= ",";
				$i++;
			}
			if ($chordarr[$i] =~ /[a-oD]/) {
				$chordarr[$i] =~ tr/D/d/;
				$tmp .= $chordarr[$i];
				push(@abcchord, $tmp);
			}
		}
		# decorations
		elsif ($c =~ /[\.:#*]/) {
			$decos .= $c;
		}
		elsif ($c eq "|") {
			$decos .= "+";
		}
		elsif ($c eq "x") {
			$decos .= "X";
		}
		elsif (($c eq "'") || ($c eq "`")) {
			$decos .= "T";
		}
		# ignore escape sequence
		elsif ($c eq "\\") {
			$i++;
		}
		# text under chord
		elsif ($c eq "T") {
			if (!$NOTEXT) {
				$gchord = substr($chord, $i+1);
				$gchord = join("\\n", split("\t", $gchord));
				$gchord = '"' . $gchord . '"';
			}
			last;
		}
		# music line
		elsif ($c =~ /[M\t]/) {
			last;
		}
	}

	# invert chord for italiantab
	if ($HEADER{"K"} =~ /^italian/) {
		my @tmp = @abcchord;
		my $diapason;
		if ($HEADER{"K"} eq "italian7tab") {
			$diapason = shift(@tmp);
			if ($diapason eq ",") { $diapason = ""; }
		}
		for ($i = $#tmp+1; $i<6; $i++) {
			push(@tmp, ",");
		}
		@tmp = reverse(@tmp);
		if ($diapason) {
			push(@tmp, $diapason);
		} else {
			for ($i = $#tmp; $i>0; $i--) {
				if ($tmp[$i] eq ",") {
					pop(@tmp);
				} else {
					last;
				}
			}
		}
		@abcchord = @tmp;
	}

	# count number of notes in chord and format diapason
	$numnotes = 0;
	for ($i=0; $i <= $#abcchord; $i++) {
		if (($i < 6) && ($abcchord[$i] =~ /[a-o]/)) {
			$numnotes++;
		}
		if (($i >= 6) && ($abcchord[$i] ne ",")) {
			$numnotes++;
			$abcchord[$i] = "{" . $abcchord[$i] . "}";
			last;
		}
	}

	# remove trailing commas
	for ($i=$#abcchord; $i>0; $i--) {
		if ($abcchord[$i] eq ",") {
			pop(@abcchord);
		} else {
			last;
		}
	}

	# build chord together
	$retval = "";
	if ($numnotes > 1) {
		$retval = "[" . join('', @abcchord) . $factor . "]";
	}
	elsif ($numnotes == 1) {
		$retval = join('', @abcchord) . $factor;
	}
	else {
		$retval = "," . $factor;
	}
	$retval =~ s/,+{/{/;  # remove commas before diapason
	$retval = $gchord . $decos . $retval;

	# take care of grids/beams
	if ($GRIDSTATE != 2) {
		$retval =  $CHORDSEP . $retval;
	}
	if ($GRIDSTATE) {
		$LAYOUT{"tabrhstyle"} = "grid";
	}

	return($retval);
}

#
# ($pretty) beautify_abc ($ugly)
#	- makes abc body code prettier
#
sub beautify_abc {
	my $body = $_[0];

	# each bar in its own line
	if (!$NOLINEBREAK) {
		$body =~ s/(.)\| +(.)/$1\|\\\n\t$2/g;
	}
	# remove superfluous %staff comment
	$body =~ s/\%staff \d+\n+$//;
	# return beatified code
	return $body;
}

#
# print_tune()
#  - prints current contents of tune and header
#
sub print_tune {
	if ($BODY eq "") {
		return;
	}

	# print header
	if ($HEADER{"X"}) {
		print("X:" . $HEADER{X} . "\n");
	}
	print "\%\n";
	if ($HEADER{"K"} =~ /^french/) {
		# better scaling for frenchtab
		$LAYOUT{"tabfontsize"} = "11";
		$LAYOUT{"tabfontscale"} = "1.2";
		$LAYOUT{"tabflagspace"} = "3.0pt";
	} else {
		# prettier layout for italiantab
		$LAYOUT{"tabfontsize"} = "12";
		$LAYOUT{"tabfontitalian"} = "itBorrono";
	}
	if ($EMULATELAYOUT) {
		for (sort keys(%LAYOUT)) {
			printf("\%\%\%\%%-14s %s\n", $_, $LAYOUT{$_});
		}
	}
	print "\%\n";
	if ($HEADER{"T1"}) {
		print("T:" . $HEADER{"T1"} . "\n");
	}
	if ($HEADER{"T2"}) {
		print("T:" . $HEADER{"T2"} . "\n");
	}
	if ($HEADER{"C1"}) {
		print("C:" . $HEADER{"C1"} . "\n");
	}
	if ($HEADER{"C2"}) {
		print("C:" . $HEADER{"C2"} . "\n");
	}
	if ($HEADER{"Z"}) {
		print("Z:" . $HEADER{"Z"} . "\n");
	}
	if ($HEADER{"M"}) {
		print("M:" . $HEADER{"M"} . "\n");
	}
	if ($HEADER{"L"}) {
		print("L:" . $HEADER{"L"} . "\n");
	}
	if ($HEADER{"K"}) {
		print("K:" . $HEADER{"K"} . "\n");
	}

	# print body
	print "\%\n";
	print "\%staff 1\n";
	print beautify_abc($BODY);
	print "\n\n";
}

#
# (void) abort_msg ($msg)
#	- print $msg and exit with errorcode 1
#     necessary because die() behaves differently since Perl 5.6
#
sub abort_msg {
	print STDERR $_[0];
	exit 1;
}

# main program
#---------------------------------------------------

#
# parse command line
#
while (@ARGV) {
	my $opt = shift @ARGV;
	my %tabtyp = ("fr" => "frenchtab", "sp" => "spanishtab",
				  "it" => "italiantab", "it7" => "italian7tab"
				  );
	if ($opt eq "-tab") {  # tablature type
		my $type = shift(@ARGV);
		if (!$tabtyp{$type}) {
			abort_msg("Unknown tablature type \"$type\".\n" .
					  "Try \"$PGM -?\" for possible values\n");
		} else {
			$HEADER{"K"} = $tabtyp{$type};
		}
	}
	elsif ($opt eq "-len") {  # abc L: field
		$HEADER{"L"} = shift(@ARGV);
	}
	elsif ($opt eq "-beam") { # no space between chords
		$CHORDSEP = "";
	}
	elsif ($opt eq "-layout") { # emulate tab layout
		$EMULATELAYOUT = 1;
	}
	elsif ($opt eq "-notext") { # suppress text under chords
		$NOTEXT = 1;
	}
	elsif ($opt eq "-nolinebreak") { # do not beautify to one bar per line
		$NOLINEBREAK = 1;
	}
	elsif ($opt eq "-?") {  # help message
		print $USAGEMSG;
		exit 0;
	}
	elsif ($opt =~ /^-/) {  # unknown option
		abort_msg($USAGEMSG);
	}
	else {                  # input file
		$INFILE = $opt;
		if (! -e $INFILE) {
			abort_msg("Cannot find $INFILE\n");
		}
	}
}

#
# process tab input
#
if ($INFILE) {
	open(IFH, $INFILE) or die("Cannot open ", $INFILE, "\n");
} else {
	open(IFH, "-") or die("Cannot open STDIN\n");
}

my $staffno = 1;

while (<IFH>) {

	my $line;
	my @help;

	$line = $_;

	# cleanup tab code
	fix_tabline(\$line);

	# end of file
	if ($line eq "e") {
		last;
	}

	# new tune
	elsif ($line eq "p") {
		print_tune();
		$HEADER{"X"} += 1;
		delete $HEADER{"T1"};
		delete $HEADER{"T2"};
		delete $HEADER{"C1"};
		delete $HEADER{"C2"};
		$BODY = "";
		$staffno = 1;
	}

	# command line options
	elsif ($line =~ /^-[iI]$/) {
		$LAYOUT{"tabrhstyle"} = "diamond";
	}
	elsif ($line =~ /^-F(\s+.*)$/) {
		$LAYOUT{"tabrhstyle"} = "modern";
	}
	elsif ($line eq "-e") {
		$LAYOUT{"landscape"} = "yes";
	}

	# text line
	elsif ($line =~ /^{.*}$/) {
		# centered text: interpret as main title
		if ($line =~ /^{\\CL\/(.*)}/) {
			if (!$HEADER{"T1"}) {
				$HEADER{"T1"} = $1;
			}
		}
		# otherwise interpret left part as title and right part as composer
		else {
			@help = split('/', substr($line, 1, -1));
			if ($help[0]) {
				if (!$HEADER{"T1"}) {
					$HEADER{"T1"} = $help[0];
				} elsif (!$HEADER{"T2"}) {
					$HEADER{"T2"} = $help[0];
				}
			}
			if (($#help > 0) && $help[1]) {
				if (!$HEADER{"C1"}) {
					$HEADER{"C1"} = $help[1];
				} elsif (!$HEADER{"C2"}) {
					$HEADER{"C2"} = $help[1];
				}
			}
		}
	}

	# ignore invisible symbols
	elsif ($line =~ /^.!/) {
		next;
	}

	# line break in tablature
	elsif ($line =~ /^\s*$/) {
		if ($BODY && (substr($BODY, -1) ne "\n")) {
			$staffno++;
			$BODY .= "\n\%staff " . $staffno . "\n";
		}
	}

	# rest
	elsif ($line =~ /^R(.+)/) {
		my $time = $1;
		$BODY .= "z" . parse_time(\$time) . " ";
	}

	# time signature
	elsif ($line =~ /^[SCc]/) {
		my $meter;
		if (($line eq "C") || ($line eq "SC") || ($line eq "So")) {
			$meter = "C";
		}
		elsif (($line eq "c") || ($line eq "Sc") || ($line eq "SO")) {
			$meter = "C|";
		}
		elsif ($line =~ /^S(.+)/) {
			@help = split(//, $1);
			if (length($1) == 1) {
				$meter = $help[0];
			} else {
				$meter = $help[0] . "/" . $help[1];
			}
		}
		if ($meter) {
			if (!$HEADER{"M"}) {
				# first meter specification
				$HEADER{"M"} = $meter;
			} else {
				# inline meter change
				$BODY .= "[M:" . $meter . "] ";
			}
		}
	}

	# bar lines
	elsif ($line =~ /^b[TQX]?$/) {
		$BODY .= " | ";
	}
	elsif ($line eq "bb") {
		$BODY .= " || ";
	}
	elsif ($line eq "bbb") {
		$BODY .= " |] ";
	}
	elsif (($line eq ".b") || ($line eq ".bb")) {
		$BODY .= " :| ";
	}
	elsif (($line eq "b.") || ($line eq "bb.")) {
		$BODY .= " |: ";
	}
	elsif ($line eq ".bb.") {
		$BODY .= " :: ";
	}
	elsif ($line eq "B") {
		if ($BODY =~ /\| $/) {
			chop($BODY);
			$BODY .= "] ";
		} else {
			$BODY .= " | ";
		}
	}
	elsif (($line eq "b!") || ($line eq "B!")) {
		$BODY .= " ";
	}

	# single tab chord
	elsif ($line =~ /^[LBWw012345xYy]/) {
		$BODY .= parse_chord($line);
	}

}
close(IFH);

# print last tune
print_tune()

